
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppsScalarFieldEnum = {
  id: 'id',
  appKey: 'appKey',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Channel_usersScalarFieldEnum = {
  id: 'id',
  channel_id: 'channel_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ChannelsScalarFieldEnum = {
  id: 'id',
  b2c: 'b2c',
  name: 'name',
  cat1: 'cat1',
  cat2: 'cat2',
  cat3: 'cat3',
  biz: 'biz',
  brand: 'brand',
  service_provider: 'service_provider',
  region: 'region',
  delivery: 'delivery',
  language: 'language',
  default_vat_custom: 'default_vat_custom',
  default_adjust: 'default_adjust',
  currency: 'currency',
  raw_data_period: 'raw_data_period',
  default_shipping_cost_per_package: 'default_shipping_cost_per_package',
  created_at: 'created_at',
  updated_at: 'updated_at',
  cafe24_mall_id: 'cafe24_mall_id',
  cafe24_shop_no: 'cafe24_shop_no',
  shopify_store_id: 'shopify_store_id',
  is_active: 'is_active',
  deleted_at: 'deleted_at',
  tokens_json: 'tokens_json',
  order_updated_at: 'order_updated_at',
  product_updated_at: 'product_updated_at',
  app_key: 'app_key',
  position: 'position',
  client_id: 'client_id',
  client_secret: 'client_secret'
};

exports.Prisma.Client_settingsScalarFieldEnum = {
  id: 'id',
  app_key: 'app_key',
  key: 'key',
  value: 'value',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Current_costsScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  hcode: 'hcode',
  barcode: 'barcode',
  cost: 'cost',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DocumentsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  title: 'title',
  user_id: 'user_id',
  files: 'files',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Erp_sync_order_queueScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  order_type: 'order_type',
  order_status: 'order_status',
  queue_status: 'queue_status',
  error_message: 'error_message',
  created_at: 'created_at',
  updated_at: 'updated_at',
  platform: 'platform'
};

exports.Prisma.Event_page_collectionsScalarFieldEnum = {
  id: 'id',
  event_page_id: 'event_page_id',
  event_page_compose_id: 'event_page_compose_id',
  ppb_collection_id: 'ppb_collection_id',
  position: 'position',
  layout_type: 'layout_type',
  product_expose_count: 'product_expose_count',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  menu: 'menu',
  menu_text_color: 'menu_text_color',
  title_bar: 'title_bar',
  title_bar_background_color: 'title_bar_background_color',
  title_bar_text_color: 'title_bar_text_color'
};

exports.Prisma.Event_page_composesScalarFieldEnum = {
  id: 'id',
  event_page_id: 'event_page_id',
  component_type: 'component_type',
  position: 'position',
  background_color: 'background_color',
  text_color: 'text_color',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Event_page_imagesScalarFieldEnum = {
  id: 'id',
  event_page_id: 'event_page_id',
  event_page_compose_id: 'event_page_compose_id',
  pc_image: 'pc_image',
  mobile_image: 'mobile_image',
  app_link_type: 'app_link_type',
  app_link: 'app_link',
  web_link_type: 'web_link_type',
  web_link: 'web_link',
  position: 'position',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Event_page_repliesScalarFieldEnum = {
  id: 'id',
  event_page_id: 'event_page_id',
  event_page_compose_id: 'event_page_compose_id',
  user_id: 'user_id',
  user_nickname: 'user_nickname',
  ip_address: 'ip_address',
  content: 'content',
  status: 'status',
  hidden_by: 'hidden_by',
  hidden_at: 'hidden_at',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Event_page_reply_reportsScalarFieldEnum = {
  id: 'id',
  event_page_reply_id: 'event_page_reply_id',
  user_id: 'user_id',
  reason: 'reason',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Event_pagesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  sub_title: 'sub_title',
  app_key: 'app_key',
  start_at: 'start_at',
  end_at: 'end_at',
  status: 'status',
  exposed: 'exposed',
  created_by: 'created_by',
  last_updated_by: 'last_updated_by',
  pc_thumbnail_image: 'pc_thumbnail_image',
  mobile_thumbnail_image: 'mobile_thumbnail_image',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Fcm_tokensScalarFieldEnum = {
  id: 'id',
  token: 'token',
  user_id: 'user_id',
  last_seen_at: 'last_seen_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FormsScalarFieldEnum = {
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  deleted_at: 'deleted_at',
  questions_json: 'questions_json',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Free_giftsScalarFieldEnum = {
  id: 'id',
  logic_type: 'logic_type',
  input_ids: 'input_ids',
  input_quantity: 'input_quantity',
  prices: 'prices',
  input_types: 'input_types',
  output_ids: 'output_ids',
  active: 'active',
  starts_at: 'starts_at',
  ends_at: 'ends_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  app_key: 'app_key',
  description: 'description',
  title: 'title',
  min_price: 'min_price',
  gift_type: 'gift_type'
};

exports.Prisma.FxratesScalarFieldEnum = {
  id: 'id',
  date: 'date',
  cr: 'cr',
  fxrate: 'fxrate',
  raw_record: 'raw_record',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.KcpbatchScalarFieldEnum = {
  sname: 'sname',
  scode: 'scode',
  pname: 'pname',
  groupid: 'groupid',
  createddt: 'createddt',
  batchkey: 'batchkey',
  customercode: 'customercode',
  cardname: 'cardname',
  cardnum: 'cardnum',
  batchavailable: 'batchavailable',
  pk: 'pk',
  eid: 'eid'
};

exports.Prisma.LocalesScalarFieldEnum = {
  id: 'id',
  localeable_type: 'localeable_type',
  localeable_id: 'localeable_id',
  language: 'language',
  field_name: 'field_name',
  content: 'content',
  translated_by: 'translated_by',
  translated_at: 'translated_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ManagesScalarFieldEnum = {
  id: 'id',
  role: 'role',
  manageableType: 'manageableType',
  franchiseId: 'franchiseId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipHistoriesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  historyableType: 'historyableType',
  historyableId: 'historyableId',
  eventType: 'eventType',
  membershipUid: 'membershipUid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  amount: 'amount',
  accessKey: 'accessKey',
  rulecode: 'rulecode'
};

exports.Prisma.MembershipRuleSetsScalarFieldEnum = {
  id: 'id',
  appKey: 'appKey',
  channelType: 'channelType',
  ruleType: 'ruleType',
  ruleDescription: 'ruleDescription',
  ruleCode: 'ruleCode',
  valueType: 'valueType',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  expireDays: 'expireDays',
  readyDays: 'readyDays'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  shopifyOrderId: 'shopifyOrderId',
  alimtalkId: 'alimtalkId',
  status: 'status',
  data: 'data',
  fullString: 'fullString',
  messageType: 'messageType',
  requestResult: 'requestResult',
  sendingResult: 'sendingResult',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phone: 'phone',
  orderId: 'orderId',
  ppbCode: 'ppbCode',
  templateCode: 'templateCode',
  userId: 'userId',
  pushType: 'pushType',
  pushData: 'pushData',
  messageableType: 'messageableType',
  messageableId: 'messageableId',
  openedAt: 'openedAt',
  email: 'email'
};

exports.Prisma.OkposLogsScalarFieldEnum = {
  id: 'id',
  orderNo: 'orderNo',
  raw: 'raw',
  logType: 'logType',
  processingStatus: 'processingStatus',
  orderId: 'orderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  responseBody: 'responseBody'
};

exports.Prisma.CardsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  last4Digits: 'last4Digits',
  expiry: 'expiry',
  cardName: 'cardName',
  nickName: 'nickName',
  isPrimary: 'isPrimary',
  customerUid: 'customerUid',
  status: 'status',
  resultData: 'resultData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  transactions: 'transactions',
  pgKind: 'pgKind',
  migrationKey: 'migrationKey'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  unusedOrderId: 'unusedOrderId',
  orderId: 'orderId',
  cardId: 'cardId',
  tid: 'tid',
  paymentMethod: 'paymentMethod',
  amount: 'amount',
  currency: 'currency',
  quota: 'quota',
  status: 'status',
  resultData: 'resultData',
  failReason: 'failReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  totalRefund: 'totalRefund',
  refundTransactions: 'refundTransactions',
  lastRefundFailReason: 'lastRefundFailReason',
  lastRefundedBy: 'lastRefundedBy',
  lastRefundedAt: 'lastRefundedAt',
  shopifyOrderId: 'shopifyOrderId',
  transactions_success: 'transactions_success',
  transactions_failed: 'transactions_failed',
  transactions_refund: 'transactions_refund'
};

exports.Prisma.BrandsScalarFieldEnum = {
  id: 'id',
  brandName: 'brandName',
  storeId: 'storeId',
  description: 'description',
  logoSrc: 'logoSrc',
  backgroundSrc: 'backgroundSrc',
  favoriteCount: 'favoriteCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  favoriteProductIds: 'favoriteProductIds',
  position: 'position',
  profileSrc: 'profileSrc',
  mainBackgroundSrc: 'mainBackgroundSrc',
  hidden: 'hidden',
  isWinc: 'isWinc'
};

exports.Prisma.Ppb_campaignsScalarFieldEnum = {
  id: 'id',
  app_key: 'app_key',
  title: 'title',
  body: 'body',
  closed: 'closed',
  closed_at: 'closed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CartsScalarFieldEnum = {
  id: 'id',
  appKey: 'appKey',
  userId: 'userId',
  cartToken: 'cartToken',
  status: 'status',
  items: 'items',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  franchiseId: 'franchiseId',
  couponId: 'couponId',
  orderDiscountPrice: 'orderDiscountPrice',
  currency: 'currency'
};

exports.Prisma.CartItemsScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  productVariantId: 'productVariantId',
  quantity: 'quantity',
  packCount: 'packCount',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hasSubItems: 'hasSubItems'
};

exports.Prisma.CartSubItemsScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  productVariantId: 'productVariantId',
  cartItemId: 'cartItemId',
  productBundlePackageId: 'productBundlePackageId',
  subItemType: 'subItemType',
  quantity: 'quantity',
  packCount: 'packCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollectionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  handle: 'handle',
  bodyHtml: 'bodyHtml',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  brandId: 'brandId',
  tags: 'tags',
  storeId: 'storeId',
  subText: 'subText',
  personaText: 'personaText',
  colorChips: 'colorChips',
  status: 'status'
};

exports.Prisma.CollectsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  collectionId: 'collectionId',
  position: 'position',
  sortValue: 'sortValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Ppb_collection_relationsScalarFieldEnum = {
  id: 'id',
  parent_id: 'parent_id',
  child_id: 'child_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  position: 'position'
};

exports.Prisma.CouponsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  brandId: 'brandId',
  franchiseId: 'franchiseId',
  couponStampId: 'couponStampId',
  userId: 'userId',
  couponCode: 'couponCode',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  canceledAt: 'canceledAt',
  discountedValue: 'discountedValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  reviewId: 'reviewId',
  isOnline: 'isOnline',
  isOffline: 'isOffline'
};

exports.Prisma.CouponStampsScalarFieldEnum = {
  id: 'id',
  brandId: 'brandId',
  storeId: 'storeId',
  couponCode: 'couponCode',
  discountValue: 'discountValue',
  isPercentage: 'isPercentage',
  expiresAt: 'expiresAt',
  title: 'title',
  description: 'description',
  imageSrc: 'imageSrc',
  createdBy: 'createdBy',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  eventStartAt: 'eventStartAt',
  eventEndAt: 'eventEndAt',
  couponCount: 'couponCount',
  isAutoDownload: 'isAutoDownload',
  couponType: 'couponType',
  minPrice: 'minPrice',
  collectionIds: 'collectionIds',
  productIds: 'productIds',
  brandIds: 'brandIds',
  xCollectionIds: 'xCollectionIds',
  xProductIds: 'xProductIds',
  xBrandIds: 'xBrandIds',
  appKey: 'appKey',
  isOnline: 'isOnline',
  isOffline: 'isOffline',
  caution: 'caution',
  availableStores: 'availableStores',
  couponName: 'couponName',
  status: 'status',
  franchiseScope: 'franchiseScope'
};

exports.Prisma.FranchiseCouponStampsScalarFieldEnum = {
  id: 'id',
  franchiseId: 'franchiseId',
  couponStampId: 'couponStampId',
  accepted: 'accepted',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FranchiseSettlementsScalarFieldEnum = {
  id: 'id',
  year: 'year',
  month: 'month',
  franchiseId: 'franchiseId',
  shipmentAmount: 'shipmentAmount',
  shipmentCanceledAmount: 'shipmentCanceledAmount',
  shipmentTotalAmount: 'shipmentTotalAmount',
  pickupAmount: 'pickupAmount',
  pickupCanceledAmount: 'pickupCanceledAmount',
  pickupTotalAmount: 'pickupTotalAmount',
  supportFundAmount: 'supportFundAmount',
  supportFundCanceledAmount: 'supportFundCanceledAmount',
  supportFundTotalAmount: 'supportFundTotalAmount',
  supportFundStockAmount: 'supportFundStockAmount',
  supportFundStockCanceledAmount: 'supportFundStockCanceledAmount',
  supportFundStockTotalAmount: 'supportFundStockTotalAmount',
  stockFeeAmount: 'stockFeeAmount',
  stockFeeCanceledAmount: 'stockFeeCanceledAmount',
  stockFeeTotalAmount: 'stockFeeTotalAmount',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shipmentReturnedAmount: 'shipmentReturnedAmount',
  pickupReturnedAmount: 'pickupReturnedAmount'
};

exports.Prisma.FranchiseScalarFieldEnum = {
  id: 'id',
  storeName: 'storeName',
  fullAddress: 'fullAddress',
  zip: 'zip',
  ownerName: 'ownerName',
  phone1: 'phone1',
  phone2: 'phone2',
  email: 'email',
  province: 'province',
  city: 'city',
  lat: 'lat',
  lng: 'lng',
  googleUrl: 'googleUrl',
  images: 'images',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  approved: 'approved',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  deniedAt: 'deniedAt',
  deniedBy: 'deniedBy',
  franchiseKind: 'franchiseKind',
  ppbNotes: 'ppbNotes',
  autoAccept: 'autoAccept',
  autoAcceptLogs: 'autoAcceptLogs',
  hasChangeRequest: 'hasChangeRequest',
  changeRequestedAt: 'changeRequestedAt',
  exposed: 'exposed',
  files: 'files',
  brn: 'brn',
  isExpress: 'isExpress',
  favoriteCount: 'favoriteCount',
  district: 'district',
  tags: 'tags',
  sendAlimtalk: 'sendAlimtalk',
  isFreeProductAvailable: 'isFreeProductAvailable',
  orderCount: 'orderCount',
  isUnable: 'isUnable',
  unavailableReason: 'unavailableReason',
  userId: 'userId',
  businessName: 'businessName',
  phone3: 'phone3',
  taxEmail: 'taxEmail',
  taxInvoiceRequested: 'taxInvoiceRequested',
  typeOfBusiness: 'typeOfBusiness',
  itemsOfBusiness: 'itemsOfBusiness',
  taxInvoiceRequestedAt: 'taxInvoiceRequestedAt',
  shippingCarrier: 'shippingCarrier',
  shippingNotice: 'shippingNotice',
  fullAddressLot: 'fullAddressLot',
  notice: 'notice',
  shippingPossible: 'shippingPossible',
  storeHourMon: 'storeHourMon',
  storeHourTue: 'storeHourTue',
  storeHourWed: 'storeHourWed',
  storeHourThu: 'storeHourThu',
  storeHourFri: 'storeHourFri',
  storeHourSat: 'storeHourSat',
  storeHourSun: 'storeHourSun',
  storeRegularOff: 'storeRegularOff',
  storeHolidayOff: 'storeHolidayOff',
  storeHolidaysOff: 'storeHolidaysOff',
  storePaymentMethods: 'storePaymentMethods',
  storeLocalPayments: 'storeLocalPayments',
  storeParkingAvailable: 'storeParkingAvailable',
  storeParkingNotice: 'storeParkingNotice',
  storeInfoUpdatedAt: 'storeInfoUpdatedAt',
  storeInfoUpdatedBy: 'storeInfoUpdatedBy',
  storeNotice: 'storeNotice',
  noShipping0: 'noShipping0',
  noShipping1: 'noShipping1',
  noShipping2: 'noShipping2',
  noShipping3: 'noShipping3',
  noShipping4: 'noShipping4',
  noShipping5: 'noShipping5',
  noShipping6: 'noShipping6',
  storeFreeOptometry: 'storeFreeOptometry',
  brandIds: 'brandIds',
  availablePickup: 'availablePickup',
  availableStock: 'availableStock',
  isPostpaid: 'isPostpaid',
  okposStoreCode: 'okposStoreCode',
  okposIsOpen: 'okposIsOpen',
  erpCode: 'erpCode',
  okposBrandCode: 'okposBrandCode',
  okposExposed: 'okposExposed',
  timeZone: 'timeZone',
  isFranchise: 'isFranchise',
  isMinishop: 'isMinishop',
  reserved1: 'reserved1',
  reserved2: 'reserved2',
  reserved3: 'reserved3',
  reserved4: 'reserved4',
  reserved5: 'reserved5',
  searchKeyword: 'searchKeyword',
  autoGenerateShippingOrder: 'autoGenerateShippingOrder',
  packagingRequired: 'packagingRequired',
  autoPrepare: 'autoPrepare'
};

exports.Prisma.ImagesScalarFieldEnum = {
  id: 'id',
  src: 'src',
  imageableId: 'imageableId',
  imageableType: 'imageableType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  position: 'position',
  width: 'width',
  height: 'height',
  alt: 'alt',
  isUsed: 'isUsed',
  overlays: 'overlays'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  tokenCustomer: 'tokenCustomer',
  tokenFranchise: 'tokenFranchise',
  storeId: 'storeId',
  franchiseId: 'franchiseId',
  customerPhone: 'customerPhone',
  customerName: 'customerName',
  shopifyName: 'shopifyName',
  ppbName: 'ppbName',
  trackingNumber: 'trackingNumber',
  trackingNumberReturn: 'trackingNumberReturn',
  reviewPoint: 'reviewPoint',
  reviewComment: 'reviewComment',
  reviewUpdatedAt: 'reviewUpdatedAt',
  acceptedBy: 'acceptedBy',
  statusCustomer: 'statusCustomer',
  statusFranchise: 'statusFranchise',
  statusShipping: 'statusShipping',
  statusPpb: 'statusPpb',
  statusPayment: 'statusPayment',
  statusShippingReturn: 'statusShippingReturn',
  statusCustomerUpdatedAt: 'statusCustomerUpdatedAt',
  statusFranchiseUpdatedAt: 'statusFranchiseUpdatedAt',
  statusShippingUpdatedAt: 'statusShippingUpdatedAt',
  statusPpbUpdatedAt: 'statusPpbUpdatedAt',
  statusShippingReturnUpdatedAt: 'statusShippingReturnUpdatedAt',
  shippingCarrier: 'shippingCarrier',
  shopifyCreatedAt: 'shopifyCreatedAt',
  deliveredAt: 'deliveredAt',
  shippingStartedAt: 'shippingStartedAt',
  shippingReturnedAt: 'shippingReturnedAt',
  paidAt: 'paidAt',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  shopifyTotalPrice: 'shopifyTotalPrice',
  statusLogs: 'statusLogs',
  isTest: 'isTest',
  returnedLineItems: 'returnedLineItems',
  channelId: 'channelId',
  shopifyOrderId: 'shopifyOrderId',
  totalRefundAmount: 'totalRefundAmount',
  totalShippingPrice: 'totalShippingPrice',
  costTotal: 'costTotal',
  costOrder: 'costOrder',
  costRefund: 'costRefund',
  costShipping: 'costShipping',
  costUpdatedAt: 'costUpdatedAt',
  vatCustom: 'vatCustom',
  priceTotalKrw: 'priceTotalKrw',
  priceTotal: 'priceTotal',
  priceCancelRefund: 'priceCancelRefund',
  priceDiscounts: 'priceDiscounts',
  priceSales: 'priceSales',
  priceVat: 'priceVat',
  priceNetSales: 'priceNetSales',
  priceCancelRefundKrw: 'priceCancelRefundKrw',
  priceDiscountsKrw: 'priceDiscountsKrw',
  priceSalesKrw: 'priceSalesKrw',
  priceVatKrw: 'priceVatKrw',
  priceNetSalesKrw: 'priceNetSalesKrw',
  revenue: 'revenue',
  utmSource: 'utmSource',
  utmMedium: 'utmMedium',
  utmCampaign: 'utmCampaign',
  utmContent: 'utmContent',
  isPostpaid: 'isPostpaid',
  isExpress: 'isExpress',
  userId: 'userId',
  customerCanceledAt: 'customerCanceledAt',
  lastRefundedAt: 'lastRefundedAt',
  franchiseDeniedAt: 'franchiseDeniedAt',
  reviewImages: 'reviewImages',
  reviewVideos: 'reviewVideos',
  appKey: 'appKey',
  couponId: 'couponId',
  orderDiscountPrice: 'orderDiscountPrice',
  appBuildNumber: 'appBuildNumber',
  deepLink: 'deepLink',
  giftProducts: 'giftProducts',
  excludeReturn: 'excludeReturn',
  skusReturned: 'skusReturned',
  noshowedAt: 'noshowedAt',
  noshowReason: 'noshowReason',
  priceGroupId: 'priceGroupId',
  totalTax: 'totalTax',
  taxesIncluded: 'taxesIncluded',
  trackingNumberRe: 'trackingNumberRe',
  statusShippingRe: 'statusShippingRe',
  statusShippingReUpdatedAt: 'statusShippingReUpdatedAt',
  reDeliveredAt: 'reDeliveredAt',
  shippingCarrierRe: 'shippingCarrierRe',
  shippingReStartedAt: 'shippingReStartedAt',
  customerCountry: 'customerCountry',
  customerState: 'customerState',
  customerAddress1: 'customerAddress1',
  customerAddress2: 'customerAddress2',
  customerZip: 'customerZip',
  customerCity: 'customerCity',
  scOrderId: 'scOrderId',
  scSentAt: 'scSentAt',
  scErrorAt: 'scErrorAt',
  isRxApproved: 'isRxApproved',
  compareAtPriceTotal: 'compareAtPriceTotal',
  compareAtPriceTotalKrw: 'compareAtPriceTotalKrw',
  pointDiscountPrice: 'pointDiscountPrice',
  isInStoreStock: 'isInStoreStock',
  packagingRequired: 'packagingRequired',
  shippingOrderId: 'shippingOrderId',
  storePreparedAt: 'storePreparedAt',
  orderType: 'orderType',
  statusOkpos: 'statusOkpos',
  statusOkposUpdatedAt: 'statusOkposUpdatedAt',
  okposOrderNo: 'okposOrderNo',
  franchisePreparedAt: 'franchisePreparedAt',
  currency: 'currency',
  fxrate: 'fxrate'
};

exports.Prisma.OrderItemsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  brandId: 'brandId',
  couponId: 'couponId',
  variantId: 'variantId',
  quantity: 'quantity',
  packCount: 'packCount',
  compareAtPrice: 'compareAtPrice',
  price: 'price',
  name: 'name',
  sku: 'sku',
  title: 'title',
  discountedPrice: 'discountedPrice',
  totalDiscount: 'totalDiscount',
  variantTitle: 'variantTitle',
  vendor: 'vendor',
  handle: 'handle',
  bogoType: 'bogoType',
  leftRight: 'leftRight',
  orderDiscountFraction: 'orderDiscountFraction',
  pointDiscountFraction: 'pointDiscountFraction',
  franchisePrice: 'franchisePrice',
  isWelcomeProduct: 'isWelcomeProduct',
  created_at: 'created_at',
  updated_at: 'updated_at',
  itemType: 'itemType'
};

exports.Prisma.OrderSubItemsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderItemId: 'orderItemId',
  productId: 'productId',
  brandId: 'brandId',
  variantId: 'variantId',
  quantity: 'quantity',
  packCount: 'packCount',
  compareAtPrice: 'compareAtPrice',
  price: 'price',
  name: 'name',
  sku: 'sku',
  title: 'title',
  discountedPrice: 'discountedPrice',
  totalDiscount: 'totalDiscount',
  variantTitle: 'variantTitle',
  vendor: 'vendor',
  handle: 'handle',
  orderDiscountFraction: 'orderDiscountFraction',
  pointDiscountFraction: 'pointDiscountFraction',
  franchisePrice: 'franchisePrice',
  productBundlePackageId: 'productBundlePackageId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  channelId: 'channelId',
  storeId: 'storeId',
  shopifyId: 'shopifyId',
  packageImage: 'packageImage',
  title: 'title',
  bodyHtml: 'bodyHtml',
  vendor: 'vendor',
  productType: 'productType',
  handle: 'handle',
  publishedAt: 'publishedAt',
  status: 'status',
  images: 'images',
  image: 'image',
  tags: 'tags',
  collectionHandles: 'collectionHandles',
  collectionIds: 'collectionIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  descriptionJson: 'descriptionJson',
  favoriteCount: 'favoriteCount',
  extra: 'extra',
  lensPatternImage: 'lensPatternImage',
  filterColors: 'filterColors',
  brandId: 'brandId',
  labels: 'labels',
  orderCount: 'orderCount',
  productGroup: 'productGroup',
  reviewPoint: 'reviewPoint',
  reviewCount: 'reviewCount',
  thumbnailImageId: 'thumbnailImageId',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  reviewStatistics: 'reviewStatistics',
  lensType: 'lensType',
  diaInner: 'diaInner',
  diaOuter: 'diaOuter',
  water: 'water',
  baseCurve: 'baseCurve',
  lensDescription: 'lensDescription',
  material: 'material',
  lensCount: 'lensCount',
  reviewNumber: 'reviewNumber',
  color: 'color',
  packCount: 'packCount',
  setProductIds: 'setProductIds',
  webOnly: 'webOnly',
  bogoType: 'bogoType',
  bogoCollectionId: 'bogoCollectionId',
  thumbnailVideo: 'thumbnailVideo',
  detailVideo: 'detailVideo',
  locale: 'locale',
  cyl: 'cyl',
  scSentAt: 'scSentAt',
  reserved1Description: 'reserved1Description',
  reserved2Description: 'reserved2Description',
  isWelcomeProduct: 'isWelcomeProduct',
  searchKeyword: 'searchKeyword',
  productBundleId: 'productBundleId',
  precaution: 'precaution',
  availableOrderCode: 'availableOrderCode'
};

exports.Prisma.ProductVariantsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  title: 'title',
  sku: 'sku',
  barcode: 'barcode',
  option1: 'option1',
  option2: 'option2',
  option3: 'option3',
  option4: 'option4',
  position: 'position',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantInventoriesScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  productVariantId: 'productVariantId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantPricesScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  productVariantId: 'productVariantId',
  priceType: 'priceType',
  currency: 'currency',
  price: 'price',
  packCount: 'packCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductBundlesScalarFieldEnum = {
  id: 'id',
  bundleCode: 'bundleCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductBundlePackagesScalarFieldEnum = {
  id: 'id',
  productBundleId: 'productBundleId',
  position: 'position',
  packageName: 'packageName',
  exposed: 'exposed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  exposeCount: 'exposeCount'
};

exports.Prisma.ProductBundlePackageItemsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  productBundleId: 'productBundleId',
  productBundlePackageId: 'productBundlePackageId',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductBundlePackageImagesScalarFieldEnum = {
  id: 'id',
  productBundleId: 'productBundleId',
  productBundlePackageId: 'productBundlePackageId',
  src: 'src',
  position: 'position',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StocksScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  available: 'available',
  lastAdjustedAt: 'lastAdjustedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  barcode: 'barcode',
  franchiseId: 'franchiseId',
  outOfStock: 'outOfStock',
  outOfStockedAt: 'outOfStockedAt',
  averagePrice: 'averagePrice'
};

exports.Prisma.StockHistoriesScalarFieldEnum = {
  id: 'id',
  stockId: 'stockId',
  transactionType: 'transactionType',
  transactionQuantity: 'transactionQuantity',
  stockHistoriableType: 'stockHistoriableType',
  stockHistoriableId: 'stockHistoriableId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  available: 'available'
};

exports.Prisma.PriceGroupsScalarFieldEnum = {
  id: 'id',
  handle: 'handle',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  allowAutoCoupon: 'allowAutoCoupon',
  appKey: 'appKey'
};

exports.Prisma.PriceGroupProductsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  priceGroupId: 'priceGroupId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  app_key: 'app_key',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  token: 'token',
  encryptedPassword: 'encryptedPassword',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordSentAt: 'resetPasswordSentAt',
  rememberCreatedAt: 'rememberCreatedAt',
  signInCount: 'signInCount',
  currentSignInAt: 'currentSignInAt',
  lastSignInAt: 'lastSignInAt',
  currentSignInIp: 'currentSignInIp',
  lastSignInIp: 'lastSignInIp',
  isSiteAdmin: 'isSiteAdmin',
  appKey: 'appKey',
  deletedAt: 'deletedAt',
  franchiseKind: 'franchiseKind',
  favoriteFranchiseIds: 'favoriteFranchiseIds',
  approved: 'approved',
  approvedAt: 'approvedAt',
  approvedBy: 'approvedBy',
  phone: 'phone',
  favoriteProductIds: 'favoriteProductIds',
  consentAccepted: 'consentAccepted',
  consentAcceptedAt: 'consentAcceptedAt',
  nickName: 'nickName',
  favoriteBrandIds: 'favoriteBrandIds',
  socialKind: 'socialKind',
  socialAccessToken: 'socialAccessToken',
  socialRefreshToken: 'socialRefreshToken',
  socialIssuedAt: 'socialIssuedAt',
  socialExpiresAt: 'socialExpiresAt',
  socialTokenObject: 'socialTokenObject',
  myReferralCode: 'myReferralCode',
  theirReferralCode: 'theirReferralCode',
  blockedUserIds: 'blockedUserIds',
  isWithdraw: 'isWithdraw',
  marketingSmsAccepted: 'marketingSmsAccepted',
  marketingSmsAcceptedAt: 'marketingSmsAcceptedAt',
  marketingPushAccepted: 'marketingPushAccepted',
  marketingPushAcceptedAt: 'marketingPushAcceptedAt',
  isMock: 'isMock',
  appBuildNumber: 'appBuildNumber',
  orderCountTotal: 'orderCountTotal',
  orderCountCancel: 'orderCountCancel',
  orderCountNoShow: 'orderCountNoShow',
  socialIdToken: 'socialIdToken',
  pushOrderAccepted: 'pushOrderAccepted',
  pushCommunityAccepted: 'pushCommunityAccepted',
  pushNewsAccepted: 'pushNewsAccepted',
  nbteyeCode: 'nbteyeCode',
  priceGroupId: 'priceGroupId',
  companyEmail: 'companyEmail',
  marketingEmailAccepted: 'marketingEmailAccepted',
  marketingEmailAcceptedAt: 'marketingEmailAcceptedAt',
  ageRange: 'ageRange',
  birthday: 'birthday',
  lastSeenAt: 'lastSeenAt',
  marketingCouponAccepted: 'marketingCouponAccepted',
  marketingCouponAcceptedAt: 'marketingCouponAcceptedAt',
  customerId: 'customerId',
  firstName: 'firstName',
  lastName: 'lastName',
  membershipAccessKey: 'membershipAccessKey',
  status: 'status',
  withdrawRequestedAt: 'withdrawRequestedAt',
  withdrawAt: 'withdrawAt',
  pushPriceDiscountAccepted: 'pushPriceDiscountAccepted',
  pickupStoreId: 'pickupStoreId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Apps: 'Apps',
  channel_users: 'channel_users',
  channels: 'channels',
  client_settings: 'client_settings',
  current_costs: 'current_costs',
  documents: 'documents',
  erp_sync_order_queue: 'erp_sync_order_queue',
  event_page_collections: 'event_page_collections',
  event_page_composes: 'event_page_composes',
  event_page_images: 'event_page_images',
  event_page_replies: 'event_page_replies',
  event_page_reply_reports: 'event_page_reply_reports',
  event_pages: 'event_pages',
  fcm_tokens: 'fcm_tokens',
  forms: 'forms',
  free_gifts: 'free_gifts',
  fxrates: 'fxrates',
  kcpbatch: 'kcpbatch',
  locales: 'locales',
  Manages: 'Manages',
  MembershipHistories: 'MembershipHistories',
  MembershipRuleSets: 'MembershipRuleSets',
  Messages: 'Messages',
  OkposLogs: 'OkposLogs',
  Cards: 'Cards',
  Payments: 'Payments',
  Brands: 'Brands',
  ppb_campaigns: 'ppb_campaigns',
  Carts: 'Carts',
  CartItems: 'CartItems',
  CartSubItems: 'CartSubItems',
  Collections: 'Collections',
  Collects: 'Collects',
  ppb_collection_relations: 'ppb_collection_relations',
  Coupons: 'Coupons',
  CouponStamps: 'CouponStamps',
  FranchiseCouponStamps: 'FranchiseCouponStamps',
  FranchiseSettlements: 'FranchiseSettlements',
  Franchise: 'Franchise',
  Images: 'Images',
  Orders: 'Orders',
  OrderItems: 'OrderItems',
  OrderSubItems: 'OrderSubItems',
  Products: 'Products',
  ProductVariants: 'ProductVariants',
  ProductVariantInventories: 'ProductVariantInventories',
  ProductVariantPrices: 'ProductVariantPrices',
  ProductBundles: 'ProductBundles',
  ProductBundlePackages: 'ProductBundlePackages',
  ProductBundlePackageItems: 'ProductBundlePackageItems',
  ProductBundlePackageImages: 'ProductBundlePackageImages',
  Stocks: 'Stocks',
  StockHistories: 'StockHistories',
  PriceGroups: 'PriceGroups',
  PriceGroupProducts: 'PriceGroupProducts',
  Settings: 'Settings',
  Users: 'Users'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
